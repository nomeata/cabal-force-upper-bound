name: CI

on:
  push:
    branches:
    - master
    tags: "*"
  pull_request:
    types: [opened, reopened, synchronize, labeled]

jobs:
  static:
    name: build static binary
    runs-on: ubuntu-latest
    container: alpine:3.12
    steps:
    - name: Install system dependencies
      run: |
        apk add --no-cache curl gcc g++ gmp-dev ncurses-dev libffi-dev make xz gzip tar perl git bash sudo binutils-gold
        apk add --no-cache zlib zlib-dev zlib-static gmp gmp-dev ncurses-static
        apk add --no-cache file

    - uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.4.4'

    - name: cache cabal store
      uses: actions/cache@v3
      with:
        key: cabal-store-alpine-${{ github.sha }}
        path: ~/.cabal/store
        restore-keys: cabal-store-alpine-

    - name: Checkout code
      uses: actions/checkout@v3

    # cannot use cabal install, https://github.com/haskell/cabal/issues/7297
    - name: Build
      run: cabal build --enable-executable-static

    - run: mv dist-newstyle/build/*/*/cabal-force-upper-bound-*/x/cabal-force-upper-bound/build/cabal-force-upper-bound/cabal-force-upper-bound .

    - name: Strip
      run: |
        strip cabal-force-upper-bound

    - name: File information
      run: ls -sh cabal-force-upper-bound; file cabal-force-upper-bound

    - name: Gzip and rename
      run: |
        gzip -S .linux.gz cabal-force-upper-bound
        ls -sh *.gz

    - uses: actions/upload-artifact@v3
      with:
        name: static-build
        path: |
          cabal-force-upper-bound.linux.gz

  enumerate:
    name: Enumerate CI configurations
    runs-on: ubuntu-latest
    outputs:
      configs: ${{ steps.enumerate.outputs.configs }}

    steps:
    - uses: actions/checkout@v3
    - id: enumerate
      run: |
        ls -1 ci-configs/| grep -o -P '.*(?=.config)'| jq -n -R -c '[inputs]' | tee configs.json
        echo "configs=$(cat configs.json)" >> $GITHUB_OUTPUT

  build:
    needs:
    - enumerate
    - static
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        plan: ${{ fromJSON(needs.enumerate.outputs.configs) }}

    steps:
    - uses: actions/checkout@v3

    - name: Detect GHC version
      if: matrix.plan != 'upper-bound'
      run: |
        ver=$(grep -o -P '(?<=with-compiler: ghc-).*' ci-configs/${{ matrix.plan }}.config)
        echo "Detected compiler version $ver in ci-configs/${{ matrix.plan }}.config"
        echo "ghc_version=$ver" >> $GITHUB_ENV

    - uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ env.ghc_version || 'latest' }}

    - name: cache cabal store
      uses: actions/cache@v3
      with:
        key: cabal-store-${{ runner.os }}-${{ matrix.plan }}-${{ github.sha }}
        path: ~/.cabal/store
        restore-keys: cabal-store-${{ runner.os }}-${{ matrix.plan }}-

    - name: Fetch static build
      uses: actions/download-artifact@v3
      with:
        name: static-build
        path: static-build
    - run: gunzip static-build/cabal-force-upper-bound.linux.gz
    - run: chmod +x static-build/cabal-force-upper-bound.linux

    - name: Special handling for upper-bound
      if: matrix.plan == 'upper-bound'
      run: |
        echo -n "extra_flags=" >> $GITHUB_ENV
        ./static-build/cabal-force-upper-bound.linux --allow-newer *.cabal >> $GITHUB_ENV

    - run: cabal build --minimize-conflict-set --ghc-options -Werror --project-file "ci-configs/${{ matrix.plan }}.config" ${{ env.extra_flags }}

    - run: mv dist-newstyle/cache/plan.json plan-${{ matrix.plan }}.json

    - name: Upload build plan as artifact
      uses: actions/upload-artifact@v3
      with:
        name: plans
        path: plan-${{ matrix.plan }}.json


  bounds:
    runs-on: ubuntu-latest
    name: Calculate cabal bounds
    needs:
    - build
    steps:
    - uses: actions/checkout@v3

    - name: Fetch static build
      uses: actions/download-artifact@v3
      with:
        name: static-build
        path: static-build

    - name: Fetch cabal-plan-bounds
      run: |
        curl -L https://github.com/nomeata/cabal-plan-bounds/releases/latest/download/cabal-plan-bounds.linux.gz | gunzip  > /usr/local/bin/cabal-plan-bounds
        chmod +x /usr/local/bin/cabal-plan-bounds

    - name: Load plans
      uses: actions/download-artifact@v3
      with:
        name: plans
        path: plans

    - run: find plans/

    - run: cabal-plan-bounds plans/*.json -c *.cabal

    - run: git diff *.cabal

    - name: Push updated .cabal file if labeled update-bounds
      if: contains(github.event.pull_request.labels.*.name, 'update-bounds')
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Update cabal bounds based on build plans
        file_pattern: '*.cabal'

    - name: Fail if .cabal file was changed
      run: git diff-files --quiet *.cabal|| exit 1

  release:
    name: Release binary
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
    - bounds
    steps:
    - name: Fetch static build
      uses: actions/download-artifact@v3
      with:
        name: static-build
        path: static-build
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: static-build/*
